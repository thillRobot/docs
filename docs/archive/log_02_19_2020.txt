
TWH Logs - 02/04/2020

    Processing the pointcloud data from the aubo Arm and the rpLidar ...
    We are finally going to do something with this awesome stuff. Write a paper!

    The goal is to submit a paper for IDETC to show off this work.

    Note: Something that I have done has caused 'catkin_make' to take forever (30sec or more). It is the PCL compile. This needs looking at.

Try this:

    I have just re-installed ROS and compiled (catkin_make) the old seam detection code. Test before going further.


    Step 1) Record a pointcloud with the Aubo Arm  - SKIP STEP 1 - use prerecored scans


    Step 2) Process the pointcloud using PCL - START HERE ON STEP 2 - process prerecorded scans - THIS WORKS (02/04/2020)

        $ roslaunch seam_detection segment_plane.launch in_file:="test_cloud8.pcd" thresh:=0.01

        try this one pcd_to_pointcloud - THIS WORKS (02/04/2020)

        $ roslaunch seam_detection segment_plane_line.launch in_file:="test_cloud11.pcd" thresh:=0.01


 Ok, that was 'sac_model_plane' based fitting now lets try Iterative Closest Point. (this is from 09/28/2018)

 Processing the pointcloud data from the aubo Arm and the rpLidar plus CAD models ... Things are getting cooooolller!!!!!!

 Import a cloud from a CAD model. Currently it works like this - from Solidworks(.stl)-->meshlab(.ply)-->cad2cloud(.pcd)-->ROS(pointcloud!)

Try this! Woop!

Step1) Make a part in your CAD program of choice. This part will become the 'reference cloud'. Save the file as a '.stl' file. If your CAD program can create a '.ply' or '.pcd' file you can skip steps 2 or 3 respectively.
s.
Step2) Convert the '.stl' to a '.ply' file using meshlab. Open the '.stl' using 'import mesh' and save it as a '.ply' file.

Correction! Step2 can be done in solidworks. This combines step and step 2. Nice

Step3) Convert the '.ply' to a '.pcd' file using cad_cloud (this is a package I wrote that uses PCL). run the following commands.

     $ rosrun cad_cloud cad_cloud /home/thill/Dropbox/t1600_ros/src/cad_cloud/images/input.ply output.pcd -n_samples 100000 -leaf_size 0.001 -write_normals 1 -no_vis_results 0

     $ pcl_viewer -multiview 1 output.pcd

Step4) Use ICP to campare the CAD/reference image to the LIDAR/source image. The LIDAR '.pcd' file must also be in the image directory.

     SCENE1:
     $ roslaunch seam_detection seam_detection_ICP.launch lidar_file:="lidar_scene1.pcd" cad_file:="cad_scene1.pcd"  thresh:=0.003

     SCENE2:
     $ roslaunch seam_detection seam_detection_ICP.launch lidar_file:="lidar_scene2.pcd" cad_file:="cad_scene2.pcd"  thresh:=0.003

     SCENE3:
     $ roslaunch seam_detection seam_detection_ICP.launch lidar_file:="lidar_scene3.pcd" cad_file:="cad_scene3.pcd"  thresh:=0.003

     SCENE3+4:
     $ roslaunch seam_detection seam_detection_ICP.launch lidar_file:="lidar_scene3.pcd" cad_file:="cad_scene4.pcd"  thresh:=0.003


Ok, well if that works I dont see why we cant do 2 parts...


     $ roslaunch seam_detection seam_detection_ICP.launch lidar_file:="cylinder.pcd" cad_file:="plate_cylinder.pcd"  thresh:=0.003

The process converges, we get a good score (if low is good, .00032)

 Try this!

$ roslaunch seam_detection seam_detection_ICP.launch lidar_file:="plate_cylinder.pcd" cad_file:="cylinder.pcd"  thresh:=0.0001
