TWH ROS LOG - Making a Goal Publisher in CPP - 10/20/2016

We want to make a cpp package to publish a goal to the turtlebos simulator (stage)
We should start with the turtlesim publish /cmd_vel example

I) check we can run turtlebotsim and publish goal node 
 
(luckily this took no time at all! Only like 3-5 hours)  
OK! The story is as I can see it, NAV2D and Turtlebotsim use different systems for goals

Nav2d (geometery_msgs)
Turtlebotsim  (move_base_msgs) and (actionlib)

Check out the tutorial here for the latter: http://wiki.ros.org/navigation/Tutorials/SendingSimpleGoals


	1) Install turtlebot simulator (see previous tutorials)


	2) create new package 

		i) go to the workspace_name/src directory first

			$ cd ~/catkin_ws/src
 
		ii) create a new package for this new publisher (notice these new dependecies) 
			
			$ catkin_create_pkg publish_goal std_msgs rospy roscpp move_base_msgs actionlib
		
		iii) create the source file and copy in the code

			/begin code block .cpp

			#include <ros/ros.h>
			#include <move_base_msgs/MoveBaseAction.h>
			#include <actionlib/client/simple_action_client.h>

			typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

			int main(int argc, char** argv){
			  ros::init(argc, argv, "publish_goal");

			  //tell the action client that we want to spin a thread by default
			  MoveBaseClient ac("move_base", true);

			  //wait for the action server to come up
			  while(!ac.waitForServer(ros::Duration(5.0))){
			    ROS_INFO("Waiting for the move_base action server to come up");
			  }

			  move_base_msgs::MoveBaseGoal goal;

			  //we'll send a goal to the robot to move 1 meter forward
			  goal.target_pose.header.frame_id = "base_link";
			  goal.target_pose.header.stamp = ros::Time::now();

			  goal.target_pose.pose.position.x = 2.0;
			  goal.target_pose.pose.position.x = 0.5;
			  goal.target_pose.pose.orientation.w = 1.0;

			  ROS_INFO("Sending goal");
			  ac.sendGoal(goal);

			  ac.waitForResult();

			  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
			    ROS_INFO("Hooray, the base moved!");
			  else
			    ROS_INFO("The base failed to move for some reason");

			  return 0;
			}

			/end code block .cpp


 
		iv) also add the following lines to the CMakeLists file.

			include_directories(include ${catkin_INCLUDE_DIRS})

			add_executable(publish_goal src/publish_goal.cpp)
			target_link_libraries(publish_goal ${catkin_LIBRARIES})
			add_dependencies(publish_goal beginner_tutorials_generate_messages_cpp) 

		v) back out to the workspace directory and compile your code

			$ cd ..  ( or $ cd ~/catkin_ws ) 
				
			$ catkin_make  (hopefully it wont take 54 trys like it did for me)  

			If you dont see a catkin failed then your package should be setp correctly. Test your package using 'rosrun'. In this example we used 'publish_goal' as the package name and the node name. This is commonly done for simple packages.


	3) Test your new package with turtlebotsim. We will start with a the same launch file we used with turtlebot sim earlier. 

			$ roslaunch turtlebot_stage turtlebot_in_stage.launch

            Be patient, as you know this step can be very slow. You should see 'rviz' appear.rps
			
			$ rosrun publish_goal publish_goal
			 
		Now Watch the Magic ! 
